try:
    import logging
    import colorlog
    import logging.config
    import sys
    if __debug__:
        logging.config.fileConfig('logging.conf')
        logger = colorlog.getLogger('loggingUser')from flask import Flask
    from flask import json
    from flask import request
    import cv2
    import face_recognition
except Exception as e:
    logging.warning("Error while importing librearies {}".format(e))
    sys.exit()


app = Flask(__name__)


@app.route("/compare", methods=['POST'])
def compare():
    data  = {
        "user": "0",
        "success": False,
        "face": [],
    }
    response = app.response_class(
        response=json.dumps(data),
        mimetype='application/json'
    )
    imagefile = request.files['file']
    number = request.form['id']

    try:
        get_vector(imagefile)
        pass
    except Exception as e:
        logging.warning('Error {}'.format(e))
        response.status_code = (500)
        return response
    else:
        response.status_code = (200)
        return response


@app.route("/search", methods=['POST'])
def search():
    data = {
        "user": "0",
        "success": False,
        "face": [],
        "telephone": "0",
    }
    response = app.response_class(
        response=json.dumps(data),
        mimetype='application/json'
    )
    imagefile = request.files['file']


    try:
        get_vector(imagefile)
    except Exception as e:
        logging.warning('Error {}'.format(e))
        response.status_code = (500)
        return response
    else:
        return response


@app.route("/register", methods=['POST'])
def register():
    data = {
        "face": [],
        "telephone": 0,
    }
    response = app.response_class(
        response=json.dumps(data),
        mimetype='application/json'
    )
    imagefile = request.files['file']
    print(imagefile)
    logging.debug('Image file = {}'.format(imagefile))

    try:
        get_vector(imagefile)
    except Exception as e:
        logging.warning('Error {}'.format(e))
        response.status_code = (500)
        return response
    else:
        response.status_code = (200)
        return response


def get_vector(photo):
    logging.debug('phtot = {}'.format(photo))
    img = cv2.imread(photo, 0)
    logging.debug('img = {}'.format(img))
    small_frame = cv2.resize(img, (0, 0), fx=0.25, fy=0.25)
    rgb_small_frame = small_frame[:, :, ::-1]
    face_locations = face_recognition.face_locations(rgb_small_frame)
    face_encodings = face_recognition.face_encodings(rgb_small_frame, face_locations)
    logging.debug('search')
    for face in face_encodings:
        matches = face_recognition.compare_faces(known, face, 0.5)
    logging.debug('matches {}'.format(matches))
    return matches


def detect_face():
    faces = []
    ret, frame = video_capture.read()
    small_frame = cv2.resize(frame, (0, 0), fx=0.25, fy=0.25)
    rgb_small_frame = small_frame[:, :, ::-1]
    face_locations = face_recognition.face_locations(rgb_small_frame)
    face_encodings = face_recognition.face_encodings(rgb_small_frame, face_locations)
    for face in face_encodings:
        matches = face_recognition.compare_faces(known, face, 0.5)
        if True in matches:
            logging.debug("It\"s a match!!")
            logging.warning("the len of known is {}".format(len(known)))
        else:
            logging.debug("new face, going to append")
            known.append(face)


if __name__ == "__main__":
    # Only for debugging while developing
    app.run(host="0.0.0.0", debug=True, port=80)
